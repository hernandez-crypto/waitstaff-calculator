{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["defaultState","currentInput","mealPrice","taxRate","tipPercentage","customerCharges","subTotal","tip","total","myEarnings","tipTotal","mealCount","averageTipPerMeal","App","state","handleSubmit","ev","preventDefault","target","baseMeal","baseMealValue","parseInt","value","taxRateValue","tipPercentageValue","calculateCustomerCharges","setState","toFixed","handleOnChange","document","getElementsByName","forEach","key","length","handleResetClick","this","className","onSubmit","onChange","htmlFor","name","placeholder","type","required","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ed23e55.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst defaultState = {\n  currentInput: {\n    mealPrice: 0,\n    taxRate: 0,\n    tipPercentage: 0\n  },\n  customerCharges: {\n    subTotal: 0,\n    tip: 0,\n    total: 0\n  },\n  myEarnings: {\n    tipTotal: 0,\n    mealCount: 0,\n    averageTipPerMeal: 0\n  }\n};\n\nexport default class App extends Component {\n  state = { ...defaultState };\n\n  handleSubmit = (ev) => {\n    ev.preventDefault();\n    let { baseMeal, taxRate, tipPercentage } = ev.target;\n    let baseMealValue = parseInt(baseMeal.value);\n    let taxRateValue = parseInt(taxRate.value);\n    let tipPercentageValue = parseInt(tipPercentage.value);\n    let { subTotal, tip, total } = this.calculateCustomerCharges(\n      baseMealValue,\n      taxRateValue,\n      tipPercentageValue\n    );\n    this.setState((state) => ({\n      currentInput: {\n        mealPrice: baseMealValue,\n        taxRate: taxRateValue,\n        tipPercentage: tipPercentageValue\n      },\n      customerCharges: {\n        subTotal,\n        tip,\n        total\n      },\n      myEarnings: {\n        tipTotal: +(state.myEarnings.tipTotal + tip).toFixed(2),\n        mealCount: state.myEarnings.mealCount + 1,\n        averageTipPerMeal: +(\n          (state.myEarnings.tipTotal + tip) /\n          (state.myEarnings.mealCount + 1)\n        ).toFixed(2)\n      }\n    }));\n    baseMeal.value = '';\n    taxRate.value = '';\n    tipPercentage.value = '';\n  };\n\n  calculateCustomerCharges(baseMeal, taxRate, tipPercentage) {\n    let subTotal = baseMeal * (taxRate / 100 + 1);\n    let tip = subTotal * (tipPercentage / 100);\n    let total = subTotal + tip;\n    subTotal = +subTotal.toFixed(2);\n    tip = +tip.toFixed(2);\n    total = +total.toFixed(2);\n    return { subTotal, tip, total };\n  }\n\n  handleOnChange = () => {\n    let baseMeal = document.getElementsByName('baseMeal')[0].value;\n    let taxRate = document.getElementsByName('taxRate')[0].value;\n    let tipPercentage = document.getElementsByName('tipPercentage')[0].value;\n    let keys = ['baseMeal', 'taxRate', 'tipPercentage'];\n\n    keys.forEach((key) => {\n      if (key.length === 0) key = 0;\n      else key = parseInt(key);\n    });\n\n    let { subTotal, tip, total } = this.calculateCustomerCharges(\n      baseMeal,\n      taxRate,\n      tipPercentage\n    );\n    this.setState({ customerCharges: { subTotal, tip, total } });\n  };\n\n  handleResetClick = () => {\n    this.setState({ ...defaultState });\n  };\n\n  render() {\n    let { customerCharges, myEarnings } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"imageContainer\">\n          <header className=\"App__Header\">\n            <h1>Waitstaff Calculator</h1>\n          </header>\n          <main>\n            <div className=\"boxesContainer\">\n              <div className=\"mealDetails\">\n                <h2>Enter the meal details</h2>\n                <hr />\n                <form\n                  onSubmit={this.handleSubmit}\n                  onChange={this.handleOnChange}>\n                  <label htmlFor=\"baseMeal\">Enter Base Meal Price: $</label>\n                  <input\n                    name=\"baseMeal\"\n                    placeholder=\"Base Meal Price\"\n                    type=\"number\"\n                    required\n                  />\n                  <label htmlFor=\"taxRate\">Enter Tax Rate: %</label>\n                  <input\n                    name=\"taxRate\"\n                    placeholder=\"Tax Rate\"\n                    type=\"number\"\n                    required\n                  />\n                  <label htmlFor=\"tipPercentage\">Enter Tip Percentage: %</label>\n                  <input\n                    name=\"tipPercentage\"\n                    placeholder=\"Tip Percentage\"\n                    type=\"number\"\n                    required\n                  />\n\n                  <button type=\"submit\">Submit</button>\n                  <button type=\"reset\">Cancel</button>\n                </form>\n              </div>\n              <div className=\"rightContainer\">\n                <div className=\"customerCharges\">\n                  <h2>Customer Charges</h2>\n                  <hr />\n                  <ul>\n                    <li>Subtotal : ${customerCharges.subTotal}</li>\n                    <li>Tip : ${customerCharges.tip}</li>\n                    <li>Total : ${customerCharges.total}</li>\n                  </ul>\n                </div>\n                <div className=\"earnings\">\n                  <h2>My Earnings</h2>\n                  <hr />\n                  <ul>\n                    <li>Tip Total : ${myEarnings.tipTotal}</li>\n                    <li>Meal Count : {myEarnings.mealCount}</li>\n                    <li>\n                      Average Tip Per Meal : ${myEarnings.averageTipPerMeal}\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n            <div className=\"resetButton\">\n              <button onClick={this.handleResetClick}>Reset</button>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}